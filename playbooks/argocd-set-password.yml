---
- name: Set Argo CD admin password (htpasswd, sense passlib)
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - "{{ playbook_dir }}/../group_vars/all/vault.yml"

  vars:
    argocd_namespace: argocd
    kubeconfig_local: "{{ lookup('env','HOME') + '/.kube/config' }}"

  pre_tasks:
    - name: Assert password present
      ansible.builtin.assert:
        that: (argocd_admin_password | default('')) | length > 0
        fail_msg: "Falta 'argocd_admin_password' (al Vault o via -e / ENV)."

  tasks:
    - name: Ensure apache2-utils (htpasswd) present
      become: true
      ansible.builtin.package:
        name: apache2-utils
        state: present

    - name: Locate htpasswd path
      ansible.builtin.shell: "which htpasswd"
      args:
        executable: /bin/bash
      register: htpasswd_path
      changed_when: false
      failed_when: htpasswd_path.rc != 0

    - name: Generate bcrypt hash with htpasswd (stdin, no pipes)
      no_log: true
      ansible.builtin.command:
        argv:
          - "{{ htpasswd_path.stdout | trim }}"
          - -niB
          - -C
          - "10"
          - admin
      args:
        stdin: "{{ argocd_admin_password }}"
      register: ht_out
      changed_when: false

    - name: Extract bcrypt hash
      no_log: true
      ansible.builtin.set_fact:
        bcrypt_hash: "{{ (ht_out.stdout or '').split(':')[1] | trim }}"

    - name: Generate ISO8601 UTC timestamp
      ansible.builtin.set_fact:
        admin_password_mtime: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"

    - name: Patch Argo CD admin secret
      no_log: true
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_local }}"
        namespace: "{{ argocd_namespace }}"
        api_version: v1
        kind: Secret
        name: argocd-secret
        state: present
        definition:
          metadata: { name: argocd-secret }
          stringData:
            admin.password: "{{ bcrypt_hash }}"
            admin.passwordMtime: "{{ admin_password_mtime }}"

    - name: Delete initial admin secret (opcional)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_local }}"
        state: absent
        api_version: v1
        kind: Secret
        name: argocd-initial-admin-secret
        namespace: "{{ argocd_namespace }}"
      ignore_errors: true

    # ── OPCIÓ A: rollout restart per anotació ───────────────────────────────────
    - name: Gen restart timestamp
      ansible.builtin.set_fact:
        _restart_ts: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"

    - name: Force rollout restart of argo-cd-argocd-server (annotation)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_local }}"
        namespace: "{{ argocd_namespace }}"
        api_version: apps/v1
        kind: Deployment
        name: argo-cd-argocd-server
        state: present
        definition:
          spec:
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/restartedAt: "{{ _restart_ts }}"
        merge_type: strategic-merge

    - name: Wait until argo-cd-argocd-server is Available
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_local }}"
        api_version: apps/v1
        kind: Deployment
        name: argo-cd-argocd-server
        namespace: "{{ argocd_namespace }}"
      register: dep_info
      until: >
        (dep_info.resources | length) > 0 and
        (dep_info.resources[0].status.availableReplicas | default(0)) >=
        (dep_info.resources[0].status.replicas | default(1))
      retries: 30
      delay: 5
      changed_when: false
    # ───────────────────────────────────────────────────────────────────────────

    - name: Done
      ansible.builtin.debug:
        msg: "✅ Argo CD admin's password updated."
